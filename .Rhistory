knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
here()
microbio_df <- read_csv(here("simulated_data", "microbial_data_simulated.csv"))
tac_folder <- here("simulated_data", "simulated_cards")
tac_raw <- list.files(tac_folder, full.names = TRUE, pattern = "\\.csv$") %>%
map_dfr(read_csv, .id = "source_file", show_col_types = FALSE)
names(microbio_df)
summary(microbio_df)
head(microbio_df, n=8)
unique(microbio_df$sample_id) %>% length()
table(microbio_df$sample_type)
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"),
sample_type = str_extract(sample_id, "effluent|compost|produce"),
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass * 100
) %>%
dplyr::select(
-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass)
)
table(microbio_clean$sample_type)
summary(microbio_clean$soil_moisture)
microbio_clean <- microbio_clean %>%
mutate(
tc_mpn = quantify_mpn(total_coliform_large_cell_count, total_coliform_small_cell_count, method = "qt-2000"),
tc_mpn_lo = quantify_95lo(total_coliform_large_cell_count, total_coliform_small_cell_count, method = "qt-2000"),
tc_mpn_hi = quantify_95hi(total_coliform_large_cell_count, total_coliform_small_cell_count, method = "qt-2000"),
ecoli_mpn = quantify_mpn(e_coli_large_cell_count, e_coli_small_cell_count, method = "qt-2000"),
ecoli_mpn_lo = quantify_95lo(e_coli_large_cell_count, e_coli_small_cell_count, method = "qt-2000"),
ecoli_mpn_hi = quantify_95hi(e_coli_large_cell_count, e_coli_small_cell_count, method = "qt-2000"),
ar_tc_mpn = quantify_mpn(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count, method = "qt-2000"),
ar_tc_mpn_lo = quantify_95lo(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count, method = "qt-2000"),
ar_tc_mpn_hi = quantify_95hi(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count, method = "qt-2000"),
ar_ecoli_mpn = quantify_mpn(ar_e_coli_large_cell_count, ar_e_coli_small_cell_count, method = "qt-2000"),
ar_ecoli_mpn_lo = quantify_95lo(ar_e_coli_large_cell_count, ar_e_coli_small_cell_count, method = "qt-2000"),
ar_ecoli_mpn_hi = quantify_95hi(ar_e_coli_large_cell_count, ar_e_coli_small_cell_count, method = "qt-2000")
)
microbio_clean <- microbio_clean %>%
mutate(across(everything(), ~replace_na(.x, 0))) %>%
mutate(
tc_detect = if_else(tc_mpn > 0, 1, 0),
ar_tc_detect = if_else(ar_tc_mpn > 0, 1, 0),
ec_detect = if_else(ecoli_mpn > 0, 1, 0),
ar_ec_detect = if_else(ar_ecoli_mpn > 0, 1, 0)
)
table(microbio_clean$tc_detect)
table(microbio_clean$ar_tc_detect)
table(microbio_clean$ec_detect)
table(microbio_clean$ar_ec_detect)
hist(microbio_clean$esbl_e_coli_cfu)
microbio_clean2 <- microbio_clean %>%
mutate(moisture_fraction = soil_moisture / 100) %>%
mutate(esbl_e_coli_cfu_adj = if_else(esbl_e_coli_cfu == 0, 0.5, esbl_e_coli_cfu),
adjusted_esbl_cfu = case_when(
sample_type %in% c("effluent", "compost") ~ esbl_e_coli_cfu_adj / (1 - moisture_fraction) / 2,
sample_type == "produce" ~ esbl_e_coli_cfu_adj / 2,
TRUE ~ NA_real_ ),
log_adjusted_esbl_cfu = log10(adjusted_esbl_cfu) + 1)
hist(microbio_clean2$adjusted_esbl_cfu)
hist(microbio_clean2$log_adjusted_esbl_cfu)
ggplot(microbio_clean2, aes(x = log_adjusted_esbl_cfu, fill = sample_type)) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal()
hist(microbio_clean2$tc_mpn)
hist(microbio_clean2$ecoli_mpn)
hist(microbio_clean2$ar_tc_mpn)
hist(microbio_clean2$ar_ecoli_mpn)
microbio_clean2 <- microbio_clean2 %>%
mutate(across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .),
.names = "{.col}_adj")) %>%
mutate(across(matches("_adj$"),
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
mutate(across(matches("^adjusted_.*_adj$"), ~ log10(.) + 1, .names = "log_{.col}"))
hist(microbio_clean2$log_adjusted_tc_mpn_adj)
hist(microbio_clean2$log_adjusted_ecoli_mpn_adj)
hist(microbio_clean2$log_adjusted_ar_ecoli_mpn_adj)
names(tac_raw)
summary(tac_raw)
head(tac_raw, n=10)
unique(tac_raw$Sample) %>% length()
unique(tac_raw$Sample[grepl("NTC", tac_raw$Sample)]) %>% length()
unique(tac_raw$Sample[grepl("NTC", tac_raw$Sample) & tac_raw$Result == "Positive"]) %>% length()
tac_clean <- tac_raw %>%
filter(!grepl("NTC", Sample, ignore.case = TRUE)) %>%
mutate(
household_id = str_extract(Sample, "HH\\d+"),
sample_type = str_extract(Sample, "effluent|compost|produce"),
detect = if_else(Result == "Positive", 1, 0)
)
View(tac_clean)
microbio_clean3 <- microbio_clean2 %>%
select(household_id, sample_type, soil_moisture, esbl_ec_cfu = esbl_e_coli_cfu,
log_adj_esbl_ecoli = log_adjusted_esbl_cfu, esbl_ecoli_detect = esbl_e_coli_present,
log_adj_tc_mpn = log_adjusted_tc_mpn_adj, log_adj_ec_mpn = log_adjusted_ecoli_mpn_adj,
log_adj_ar_tc_mpn = log_adjusted_ar_tc_mpn_adj, log_adj_ar_ec_mpn = log_adjusted_ar_ecoli_mpn_adj,
tc_detect, ec_detect, ar_tc_detect, ar_ec_detect)
write_csv(microbio_clean3, here("clean_data", "microbial_data_cleaned.csv")) # clean_data is folder in current directory
write_csv(tac_clean %>%
select(household_id, sample_type, Target, Well, Cq, Cq_sd = `Cq SD`, Result, detect),
here("clean_data", "tac_data_cleaned.csv"))
View(microbio_df)
---
title: "Data Simulations for DHKUH Training"
knitr::opts_chunk$set(echo = TRUE)
# set root directory
knitr::opts_knit$set(root.dir ="/Users/hkamato/Desktop/GitHub/DHKUH Data Analysis Training")
# Load required packages
library(tidyverse)
library(lubridate)
# Household/sample IDs and sample types
household_ids <- paste0("HH", sprintf("%03d", 1:140))
sample_types <- c("effluent", "compost", "produce")
# Create full sample-level dataset
sample_metadata <- expand.grid(
household_id = household_ids,
sample_type = sample_types,
stringsAsFactors = FALSE
) %>%
arrange(household_id, sample_type) %>%
mutate(sample_id = paste0(household_id, "_", sample_type))
# Create 140 household IDs
household_ids <- paste0("HH", sprintf("%03d", 1:140))
# Create tole variable: 20 toles with 7 households each
tole_ids <- paste0("Tole_", sprintf("%02d", 1:20))
tole_assignment <- rep(tole_ids, each = 7)
# Simulate binary variables with reasonable probabilities
simulate_binary <- function(n, prob = 0.5) {
rbinom(n, 1, prob)
}
# Simulate survey data
survey_data <- tibble(
household_id = household_ids,
tole = tole_assignment,
# Demographics
caregiver_educated = simulate_binary(140, 0.6),
crowded_household = simulate_binary(140, 0.4),
improved_floor = simulate_binary(140, 0.5),
improved_water = simulate_binary(140, 0.7),
improved_sanitation = simulate_binary(140, 0.65),
handwashing_station = simulate_binary(140, 0.55),
owns_animals = simulate_binary(140, 0.8),
# Animal ownership
owns_cow = simulate_binary(140, 0.8),
owns_goat = simulate_binary(140, 0.7),
owns_poultry = simulate_binary(140, 0.65),
owns_dog = simulate_binary(140, 0.4)
)
# Biodigester waste use (conditional on animal ownership)
survey_data <- survey_data %>%
mutate(
cow_waste_into_digester = if_else(owns_cow == 1, simulate_binary(140, 0.8), 0),
goat_waste_into_digester = if_else(owns_goat == 1, simulate_binary(140, 0.3), 0),
poultry_waste_into_digester = if_else(owns_poultry == 1, simulate_binary(140, 0.2), 0),
dog_waste_into_digester = if_else(owns_dog == 1, simulate_binary(140, 0.1), 0),
waste_freq_per_week = sample(0:7, 140, replace = TRUE),
biodigester_broken = simulate_binary(140, 0.64),
mix_by_hand = simulate_binary(140, 0.4),
effluent_resttime_months = sample(0:8, 140, replace = TRUE),
effluent_applied_to_crops = simulate_binary(140, 0.8),
effluent_applied_by_hand = if_else(effluent_applied_to_crops == 1, simulate_binary(140, 0.6), 0),
effluent_applied_crop_1 = if_else(effluent_applied_to_crops == 1, simulate_binary(140, 0.8), 0),
effluent_applied_crop_2 = if_else(effluent_applied_to_crops == 1, simulate_binary(140, 0.65), 0),
effluent_applied_crop_3 = if_else(effluent_applied_to_crops == 1, simulate_binary(140, 0.7), 0),
effluent_applied_crop_4 = if_else(effluent_applied_to_crops == 1, simulate_binary(140, 0.3), 0),
)
# Child health
survey_data <- survey_data %>%
mutate(
child_has_diarrhea_7d = simulate_binary(140, 0.2)
)
# View first few rows
print(head(survey_data))
# Optionally save as CSV
write_csv(survey_data, "/Users/hkamato/Desktop/GitHub/DHKUH Data Analysis Training/simulated_data/survey_data_simulated.csv")
knitr::opts_chunk$set(echo = TRUE)
# set root directory
knitr::opts_knit$set(root.dir ="/Users/hkamato/Desktop/GitHub/Pathogen-Data-Analysis-Training")
# Load required packages
library(tidyverse)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE)
# set root directory
knitr::opts_knit$set(root.dir ="/Users/hkamato/Desktop/GitHub/Pathogen-Data-Analysis-Training")
# Load required packages
library(tidyverse)
library(lubridate)
# Household/sample IDs and sample types
household_ids <- paste0("HH", sprintf("%03d", 1:140))
sample_types <- c("effluent", "compost", "produce")
# Create full sample-level dataset
sample_metadata <- expand.grid(
household_id = household_ids,
sample_type = sample_types,
stringsAsFactors = FALSE
) %>%
arrange(household_id, sample_type) %>%
mutate(sample_id = paste0(household_id, "_", sample_type))
# Create 140 household IDs
household_ids <- paste0("HH", sprintf("%03d", 1:140))
# Create tole variable: 20 toles with 7 households each
tole_ids <- paste0("Tole_", sprintf("%02d", 1:20))
tole_assignment <- rep(tole_ids, each = 7)
# Simulate binary variables with reasonable probabilities
simulate_binary <- function(n, prob = 0.5) {
rbinom(n, 1, prob)
}
# Simulate survey data
survey_data <- tibble(
household_id = household_ids,
tole = tole_assignment,
# Demographics
caregiver_educated = simulate_binary(140, 0.6),
crowded_household = simulate_binary(140, 0.4),
improved_floor = simulate_binary(140, 0.5),
improved_water = simulate_binary(140, 0.7),
improved_sanitation = simulate_binary(140, 0.65),
handwashing_station = simulate_binary(140, 0.55),
owns_animals = simulate_binary(140, 0.8),
# Animal ownership
owns_cow = simulate_binary(140, 0.8),
owns_goat = simulate_binary(140, 0.7),
owns_poultry = simulate_binary(140, 0.65),
owns_dog = simulate_binary(140, 0.4)
)
# Biodigester waste use (conditional on animal ownership)
survey_data <- survey_data %>%
mutate(
cow_waste_into_digester = if_else(owns_cow == 1, simulate_binary(140, 0.8), 0),
goat_waste_into_digester = if_else(owns_goat == 1, simulate_binary(140, 0.3), 0),
poultry_waste_into_digester = if_else(owns_poultry == 1, simulate_binary(140, 0.2), 0),
dog_waste_into_digester = if_else(owns_dog == 1, simulate_binary(140, 0.1), 0),
waste_freq_per_week = sample(0:7, 140, replace = TRUE),
biodigester_broken = simulate_binary(140, 0.64),
mix_by_hand = simulate_binary(140, 0.4),
effluent_resttime_months = sample(0:8, 140, replace = TRUE),
effluent_applied_to_crops = simulate_binary(140, 0.8),
effluent_applied_by_hand = if_else(effluent_applied_to_crops == 1, simulate_binary(140, 0.6), 0),
effluent_applied_crop_1 = if_else(effluent_applied_to_crops == 1, simulate_binary(140, 0.8), 0),
effluent_applied_crop_2 = if_else(effluent_applied_to_crops == 1, simulate_binary(140, 0.65), 0),
effluent_applied_crop_3 = if_else(effluent_applied_to_crops == 1, simulate_binary(140, 0.7), 0),
effluent_applied_crop_4 = if_else(effluent_applied_to_crops == 1, simulate_binary(140, 0.3), 0),
)
# Child health
survey_data <- survey_data %>%
mutate(
child_has_diarrhea_7d = simulate_binary(140, 0.2)
)
# View first few rows
print(head(survey_data))
# Optionally save as CSV
write_csv(survey_data, "./simulated_data/survey_data_simulated.csv")
# Helper function
simulate_quanti_tray_counts <- function(n) {
tibble(
small_cell_count = sample(0:49, n, replace = TRUE),
large_cell_count = sample(0:48, n, replace = TRUE)
)
}
n <- nrow(sample_metadata)  # 420
# IDEXX data
microbio_data <- sample_metadata %>%
bind_cols(
simulate_quanti_tray_counts(n) %>% rename_with(~paste0("total_coliform_", .)),
simulate_quanti_tray_counts(n) %>% rename_with(~paste0("e_coli_", .)),
simulate_quanti_tray_counts(n) %>% rename_with(~paste0("ar_total_coliform_", .)),
simulate_quanti_tray_counts(n) %>% rename_with(~paste0("ar_e_coli_", .))
)
# ESBL data
microbio_data <- microbio_data %>%
mutate(
plate_weight = case_when(sample_type == "effluent" | sample_type == "compost" ~ sample(0.301:0.425, n, replace = TRUE),
sample_type == "produce" ~ NA_real_),
wet_weight = case_when(sample_type %in% c("effluent", "compost") ~ runif(n, min = 4.901, max = 5.125),
sample_type == "produce" ~ NA_real_),
dry_weight = case_when(sample_type == "effluent" ~ sample(2.85:4.55, n, replace = TRUE),
sample_type == "compost" ~ sample(3.81:5.101, n, replace = TRUE),
sample_type == "produce" ~ NA_real_),
esbl_e_coli_present = rbinom(n, 1, 0.3),
esbl_e_coli_cfu = if_else(esbl_e_coli_present == 1, sample(1:250, n, replace = TRUE), 0)
)
# Save and preview
head(microbio_data)
write_csv(microbio_data, "./simulated_data/microbial_data_simulated.csv")
# Number of TAC cards needed: 7 samples per card
n_cards <- ceiling(nrow(sample_metadata) / 7)
# Simulate pathogen targets (you can customize this list)
targets <- c(
# Bacteria
"Campylobacter", "Salmonella", "Shigella", "E. coli O157", "ETEC", "EPEC",
"EAEC", "STEC", "Vibrio cholerae", "Yersinia enterocolitica",
"Clostridium difficile", "Aeromonas", "Helicobacter pylori",
"Listeria monocytogenes", "Bacteroides fragilis",
# Viruses
"Norovirus GI", "Norovirus GII", "Rotavirus A", "Astrovirus",
"Adenovirus 40/41", "Sapovirus", "Enterovirus", "Hepatitis A", "Hepatitis E",
# Protozoa
"Giardia", "Cryptosporidium", "Entamoeba histolytica",
"Blastocystis", "Cyclospora", "Dientamoeba fragilis",
# Helminths
"Ascaris", "Trichuris", "Ancylostoma", "Necator", "Strongyloides",
# Antibiotic Resistance Genes (optional group)
"blaCTX-M", "blaNDM", "mecA", "tetA", "sul1", "qnrS",
# Fecal markers / process controls
"HF183", "CrAssphage", "Sketa22", "BacHum", "MS2", "Spiked_Extraction_Control", "No Template Control"
)
simulate_card_file <- function(card_num, samples_on_card, out_dir = "./simulated_data/simulated_cards") {
# Add 8th sample as NTC
ntc_sample <- tibble(
sample_id = paste0("NTC_card", sprintf("%02d", card_num)),
household_id = NA,
sample_type = "NTC"
)
full_samples <- bind_rows(samples_on_card, ntc_sample)
# Define TAC well layout (A1–H6, assuming 48 targets, 8 samples, 6 targets per column)
wells <- paste0(rep(LETTERS[1:8], each = 6), rep(1:6, 8))
# Expand data for all targets
df <- expand_grid(
Sample = full_samples$sample_id,
Target = targets
) %>%
arrange(Sample, Target) %>%
mutate(
Cq = ifelse(Sample == ntc_sample$sample_id, NA, ifelse(runif(n()) < 0.3, round(runif(n(), 20, 35), 2), NA_real_)),
AMP = case_when(
!is.na(Cq) ~ "Amp",
runif(n()) < 0.1 ~ "Inconclusive",
TRUE ~ "No Amp"
),
`Amp Score` = ifelse(!is.na(Cq), round(runif(n(), 1.2, 2.0), 2), round(runif(n(), 0.0, 1.1), 2)),
Result = case_when(
!is.na(Cq) ~ "Positive",
AMP == "Inconclusive" ~ "Equivocal",
TRUE ~ "Negative"
),
`Cq Conf` = ifelse(!is.na(Cq), round(runif(n(), 0.8, 1.0), 2), round(runif(n(), 0.0, 0.5), 2)),
`Cq SD` = ifelse(!is.na(Cq), round(runif(n(), 0.1, 1.0), 2), NA_real_)
)
# Assign wells (repeat A1–H6 for each target)
df <- df %>%
group_by(Sample) %>%
mutate(Well = rep(wells[1:length(targets)], length.out = n())) %>%
ungroup()
# Create output directory if needed
dir.create(out_dir, showWarnings = FALSE)
# Create safe filename
date <- Sys.Date() + days(card_num)
time <- format(Sys.time(), "%H%M%S")
file_name <- paste0("card", sprintf("%02d", card_num), "_hka_", format(date, "%Y%m%d"),
"_Results_", format(date, "%Y%m%d"), "_", time, ".xlsx")
# Write file
write_csv(df, file.path(out_dir, file_name))
return(file_name)
}
# Split across 60 cards
n_cards <- ceiling(nrow(sample_metadata) / 7)
card_files <- vector("character", n_cards)
for (i in 1:n_cards) {
start <- (i - 1) * 7 + 1
end <- min(i * 7, nrow(sample_metadata))
card_samples <- sample_metadata[start:end, ]
card_files[i] <- simulate_card_file(i, card_samples)
}
# Show generated files
print(card_files)
library(read_xl)
library(readxl)
# Check working directory
here()
# Read microbiological data
# (there are also packages you can install and load, like read_xl(), for reading .xlsx files)
microbio_df <- read_csv(here("simulated_data", "microbial_data_simulated.csv"))
# Check working directory
here()
here()
setwd("/Users/hkamato/Desktop/GitHub/Pathogen-Data-Analysis-Training")
here()
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
library(readxl)
# Check working directory
here()
# Set new directory if needed
setwd(/Users/hkamato/Desktop/GitHub/Pathogen-Data-Analysis-Training)
# Set new directory if needed
setwd("/Users/hkamato/Desktop/GitHub/Pathogen-Data-Analysis-Training")
knitr::opts_chunk$set(echo = TRUE)
# Install packages
#install.packages(c("here","tidyverse","dplyr","quantitray","readxl"))
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
library(readxl)
# Check current directory & set new directory if needed
here()
setwd("/Users/hkamato/Desktop/GitHub/Pathogen-Data-Analysis-Training")
here()
# Check current directory & set new directory if needed
here()
